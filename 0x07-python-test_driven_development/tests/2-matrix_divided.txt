Test for 2-matrix_divided module
=============================

Import checks
-------------

Import the function:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Documentation checks
--------------------

Check for module documentation:
	>>> mod_doc = __import__('2-matrix_divided').__doc__
	>>> len(mod_doc) > 1
	True

Check for function documentation:
	>>> func_doc = __import__('2-matrix_divided').matrix_divided.__doc__
	>>> len(func_doc) > 1
	True

Test case - matrix with single element:
	>>> matrix = [[3]]
	>>> print(matrix_divided(matrix, 3))
	[[1.0]]

Test case - negative divisor:
        >>> matrix = [[3, 9], [12, 15]]
        >>> print(matrix_divided(matrix, 3))
        [[1.0, 3.0], [4.0, 5.0]]

Test case - negative divisor:
	>>> matrix = [[3, 9], [12, 15]]
	>>> print(matrix_divided(matrix, -3))
	[[-1.0, -3.0], [-4.0, -5.0]]

Test case - divisor is 0:
	>>> matrix = [[3, 9], [12, 15]]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

Test case - uneven row sizes:
	>>> matrix = [[3, 9], [12, 15, 3]]
        >>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

Test case - Matrix element not int/float:
	>>> matrix = [[3, "9"], [15, 3]]
        >>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case - Divisor is a string:
	>>> matrix = [[3, 9], [15, 3]]
        >>> print(matrix_divided(matrix, "3"))
	Traceback (most recent call last):
		...
	TypeError: div must be a number

Test case - missing positional arguments:
	>>> matrix = [[3, 9], [15, 3]]
	>>> print(matrix_divided(matrix))
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> print(matrix_divided(3))
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
	
	>>> print(matrix_divided())
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Test case - matrix with one float(inf/nan) and integer div:
	>>> matrix = [[1, 2, 3], [4, float('inf'), 6]]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, inf, 2.0]]

	>>> matrix = [[1, 2, 3], [4, float('nan'), 6]]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, nan, 2.0]]

Test case - div is float(inf/nan):
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> print(matrix_divided(matrix, float('inf')))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> print(matrix_divided(matrix, float('nan')))
	[[nan, nan, nan], [nan, nan, nan]]

Test case - matrix with float(inf/nan) and div = float(inf/nan):
	>>> matrix = [[3, 9], [float('inf'), float('nan')]]
	>>> print(matrix_divided(matrix, float('inf')))
	[[0.0, 0.0], [nan, nan]]

	>>> matrix = [[3, 9], [float('inf'), float('nan')]]
	>>> print(matrix_divided(matrix, float('nan')))
	[[nan, nan], [nan, nan]]

Test case - matrix not a list of lists of integers and div is integer:
	>>> matrix = [3, 9]
        >>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
